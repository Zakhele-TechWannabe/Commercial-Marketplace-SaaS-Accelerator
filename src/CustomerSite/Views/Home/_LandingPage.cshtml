@*@using Microsoft.Marketplace.SaasKit.Models*@

@using Marketplace.SaaS.Accelerator.Services.Models
@model Marketplace.SaaS.Accelerator.Services.Models.SubscriptionResultExtension

@{
    ViewData["Title"] = "Home";
}
@if (!Model.ShowWelcomeScreen)
{
    <div class="container" id="divHome">
        <form method="post" id="frmIndex">

@*             <div id="initialloader" class="initialloader" style="display: none;">
                <span class="box"></span>
                <span class="box"></span>
                <div class="code">
                    <img src="~/images/botsa-logo.png" width="300px" />
                </div>
                <span class="txt">Training up your Botsa...</span>
            </div> *@

            <div class="text-white mt20">
                <span class="cm-section-heading">You are almost there!! We just need a few additional details to get you started.</span>
            </div>
            @if (Model != null && !string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div class="alert alert-danger">
                    <strong>Error!</strong> Ooops, something went wrong. Please try again a later, say maybe 15 mins? We'll send you an email once we're back up.
                </div>
            }
            else
            {
                <div class="cm-panel-default mt20">
                    <dl class="row text-left">

                        <dt class="col-sm-2 p-2 p10">
                            @Html.DisplayName("You have selected the: ")
                        </dt>
                        @{
                            string displayPlanName = Model.PlanId switch
                            {
                                "ef300db0-9b33-4bae-8510-8bee3d897ec5" => "Starter Plan",
                                "aa9b2135-7c0a-4ef7-820a-8e74a9ba0592" => "Team Plan",
                                "0eabdd33-24e4-4ced-a7ae-ceaa4febad32" => "Business Plan",
                                "a01925ee-f3ca-40ba-938d-0f996f3eca52" => "Enterprise Plan",
                                _ => "Plan Deprecated"
                            };
                        }
                        <dd class="col-sm-4 p-2 p10">
                            @Html.DisplayName(displayPlanName)
                        </dd>

                        <dt class="col-sm-2 p-2 p10">
                            @Html.DisplayName("Pricing Term")
                        </dt>
                        @if (Model.Term.TermUnit == TermUnitEnum.P1M)
                        {
                        <dd class="col-sm-4 p-2 p10">
                            @Html.DisplayName("Monthly")
                            </dd>
                        }
                        else
                        {
                        <dd class="col-sm-4 p-2 p10">
                            @Html.DisplayName("Yearly")
                            </dd>
                        }

                        <dt class="col-sm-12 p-2 p10">
                            @Html.DisplayName("Plan Details")
                            </dt>
                        <dd class="col-sm-12 p-2 p10">
                            @{
                                switch (Model.PlanId)
                                {
                                    case "ef300db0-9b33-4bae-8510-8bee3d897ec5":
                                        @:Maximum Users: 3
                                        <br />
                                        @:Cost per User: Free
                                        <br />
                                        @:Knowledge Base Sources:
                                        <ul>
                                            <li>Documents (PDF and Word)</li>
                                            <li>Public Web</li>
                                        </ul>
                                        @:Features:
                                        <ul>
                                            <li>Basic access to public documents and websites.</li>
                                        </ul>
                                        break;
                                    case "aa9b2135-7c0a-4ef7-820a-8e74a9ba0592":
                                        @:Maximum Users: 50
                                        <br />
                                        @:Cost per User: $4
                                        <br />
                                        @:Knowledge Base Sources:
                                        <ul>
                                            <li>Documents (PDF and Word)</li>
                                            <li>Public Web</li>
                                            <li>Intranet/Private Websites</li>
                                            <li>SharePoint</li>
                                            <li>FAQs</li>
                                        </ul>
                                        @:Features:
                                        <ul>
                                            <li>Access to both public and private knowledge bases including SharePoint and FAQs.</li>
                                            <li>Dashboards and Metrics for monitoring and analytics.</li>
                                            <li>Administration features for team management.</li>
                                        </ul>
                                        break;
                                    case "0eabdd33-24e4-4ced-a7ae-ceaa4febad32":
                                        @:Maximum Users: 200
                                        <br />
                                        @:Cost per User: $10
                                        <br />
                                        @:Knowledge Base Sources:
                                        <ul>
                                            <li>Documents (PDF and Word)</li>
                                            <li>Public Web</li>
                                            <li>Intranet/Private Websites</li>
                                            <li>SharePoint</li>
                                            <li>FAQs</li>
                                            <li>Databases</li>
                                        </ul>
                                        @:Features:
                                        <ul>
                                            <li>All features of the Team Plan.</li>
                                            <li>Advanced analytics and reporting.</li>
                                            <li>Priority support.</li>
                                        </ul>
                                        break;
                                    case "a01925ee-f3ca-40ba-938d-0f996f3eca52":
                                        @:Unlimited Users
                                        <br />
                                        @:Cost per User: Custom Pricing
                                        <br />
                                        @:Knowledge Base Sources:
                                        <ul>
                                            <li>All sources included in lower plans.</li>
                                            <li>Custom integrations.</li>
                                        </ul>
                                        @:Features:
                                        <ul>
                                            <li>All features of the Business Plan.</li>
                                            <li>Customizable dashboards and reports.</li>
                                            <li>Dedicated account manager.</li>
                                            <li>Enterprise-level support and SLAs.</li>
                                        </ul>
                                        break;
                                    default:
                                        @:Plan Deprecated
                                        break;
                                }
                            }
                        </dd>

                        @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart){
                         <dt class="col-sm-12 p-2 p10">
                            @Html.DisplayName("Have a Promo Code?")
                        </dt>
                        <dd class="col-sm-8 text-input-bar">
                            <input type="text" id="promoCodeId" class="text-input-bar p-2" placeholder="Enter promo code">
                            <button type="button" onclick="validatePromoCode()" class="cm-button-default p-12">Validate Promo Code</button>
                        </dd>
                        <dd class="col-sm-4 p-2 p10">
                            <div id="promoMessage"></div>
                        </dd>
                        <div id="loader" class="loader-circle-9" style="display: none;"></div>
                        }

                        <div class="text-white mt20">
                            <span class="cm-section-subheading">Configuration Details</span>
                            <p class="text-black p-2 p10">To complete the activation of your Botsa Azure Marketplace subscriptions, please provide us with the following configuration details:</p>
                        </div>
                       
                        @if (Model.SubscriptionParameters != null && Model.SubscriptionParameters.Count() > 0)
                        {

                            for (int i = 0; i < Model.SubscriptionParameters.Count(); i++)
                            {
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].Id)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].PlanAttributeId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].ValueType)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].PlanId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].OfferId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].SubscriptionId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].DisplayName)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].Type)

                                if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart)
                                {
                                    <dt class="col-sm-3 p-2 p10 @Model.SubscriptionParameters[i].Type">
                                        @Html.DisplayFor(model => model.SubscriptionParameters[i].DisplayName, new { required = "required", @class = @Model.SubscriptionParameters[i].Type })
                                        @if (Model.SubscriptionParameters[i].IsRequired == true)
                                        {
                                            <span class="red-star @Model.SubscriptionParameters[i].Type">*</span>
                                        }


                                    </dt>
                                }
                                else
                                {
                                    @if (Model.SubscriptionParameters[i].Type.ToLower() == "input")
                                    {
                                        <dt class="col-sm-3 p-2 p10 text-input-bar @Model.SubscriptionParameters[i].Type">
                                            @Html.DisplayFor(model => model.SubscriptionParameters[i].DisplayName)
                                        </dt>
                                    }
                                }

                                @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart)
                                {
                                    @if (Model.SubscriptionParameters[i].FromList == true)
                                    {
                                        var data = Model.SubscriptionParameters[i].ValuesList;
                                        var selectList = new SelectList(data.Split(','));


                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.DropDownList(string.Format("SubscriptionParameters[{0}].Value", @i), selectList, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", name = string.Format("SubscriptionParameters[{0}].Value", @i), @id = string.Format("SubscriptionParameters_{0}__Value", @i) })

                                            }
                                            else
                                            {
                                                @Html.DropDownList(string.Format("SubscriptionParameters[{0}].Value", @i), selectList, new { @class = @Model.SubscriptionParameters[i].Type + " w200", name = string.Format("SubscriptionParameters[{0}].Value", @i), @id = string.Format("SubscriptionParameters_{0}__Value", @i) })

                                            }

                                        </dd>

                                    }
                                    else if (Model.SubscriptionParameters[i].Htmltype == "date")
                                    {
                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }

                                        </dd>
                                    }
                                    else
                                    {
                                        <dd class="col-sm-9 p-2 p10 text-input-bar @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }

                                        </dd>
                                    }
                                }
                                else
                                {
                                    @if (Model.SubscriptionParameters[i].Type.ToLower() == "input")
                                    {
                                        <dd class="col-sm-9 p-2 p10 text-input-bar @Model.SubscriptionParameters[i].Type">
                                            @Html.DisplayFor(model => model.SubscriptionParameters[i].Value)
                                            @Html.HiddenFor(model => model.SubscriptionParameters[i].Value)
                                        </dd>
                                    }
                                }
                            }

                        }

                    </dl>
                </div>
                <div class="text-end">
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.Subscribed)
                    {
                        <button type="submit" asp-action="SubscriptionOperation" asp-route-subscriptionId="@Model.Id" asp-route-planId="@Model.PlanId" asp-route-operation="Deactivate" class="cm-button-default text-end">Unsubscribe</button>
                        <button type="submit" asp-action="Subscriptions" class="cm-button-default text-end">Go to Subscription List</button>
                    }
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart && Model.IsAutomaticProvisioningSupported == true)
                    {
                        <a onclick="SubscriptionOperation('@Model.Id','@Model.PlanId','Activate')" id="btnActive" class="cm-button-default text-end">Activate</a>
                    }
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart && Model.IsAutomaticProvisioningSupported == false)
                    {
                        <a onclick="SubscriptionOperation('@Model.Id','@Model.PlanId','Activate')" id="btnActive" class="cm-button-default text-end" style="text-decoration:none;">Subscribe</a>
                    }
                </div>
            }
        </form>
    </div>
}
else
{
    <body id="page-top">
        <header class="masthead">
            <div class="container px-5">
                <div class="row gx-5 align-items-center">
                    <div class="col-lg-6">
                        <div class="mb-5 mb-lg-0 text-center text-lg-start">
                            <h1 class="display-1 lh-1 mb-3">Transform Your Workplace With</h1>
                            <p class="lead fw-normal text-muted mb-5">Streamline Communications. Enhance Productivity. Connect Effortlessly.</p>
                            <div class="d-flex flex-column flex-lg-row align-items-center">
                                <a class="me-sm-3 mb-4 mb-sm-0" href="https://azuremarketplace.microsoft.com/en-us/marketplace/apps/boxfusion.botsa-v1-4-live?tab=PlansAndPrice"><img src="/images/marketplace.png" alt="Azure Marketplace" style="width: 150px; height: auto;" /></a>
                                <a href="https://appsource.microsoft.com/en-us/product/web-apps/boxfusion.botsa-v1-4-live-preview?flightCodes=a1f07980-4cab-4b1c-975e-d9fcbcd73545&tab=PlansAndPrice"><img class="app-badge" src="/images/appsource_v1.png" alt="AppSource" style="width: 150px; height: auto;" /></a>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="masthead-device-mockup">
                            <img src="/images/botsa-logo.png" style="max-width: 100%; height: auto" alt="Botsa Logo" />
                        </div>
                    </div>
                </div>
            </div>
        </header>
    </body>
}
<div id="loader" class="loader-circle-9" style="display: none;"></div>
<script type="text/javascript">

    document.addEventListener('DOMContentLoaded', function () {
        var loader = document.getElementById('initialloader');
        if (loader) {
            loader.style.display = 'block';
            setTimeout(function () {
                loader.style.display = 'none';
            }, 7000); // Hide the loader after 7 seconds
        }
    });

    async function getAuthToken() {
        const authRequest = {
            userNameOrEmailAddress: "admin",
            password: "123qwe"
        };

        const response = await fetch('https://localhost:44362/api/TokenAuth/Authenticate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json-patch+json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(authRequest)
        });

        if (!response.ok) {
            throw new Error('Failed to authenticate');
        }

        const data = await response.json();
        return data.result.accessToken;
    }

    async function validatePromoCode() {
        console.log("validatePromoCode function called");
        const promoCodeElement = document.getElementById('promoCodeId');
        if (!promoCodeElement) {
            console.error("promoCode element not found");
            return;
        }
        const promoCode = promoCodeElement.value;
        console.log("Promo Code:", promoCode);
        const promoMessage = document.getElementById('promoMessage');
        const loader = document.getElementById('loader');

        promoMessage.innerText = '';
        loader.style.display = 'block';

        try {
            const token = await getAuthToken();

            const response = await fetch(`https://localhost:44362/api/services/Botsa/BotsaCodeGenerator/ValidateCode?code=${promoCode}`, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error('Ooops!! Looks like your promo code is invalid. Please reach out to your account manager for a valid promotional code.');
            }

            const data = await response.json();
            console.log("Data received:", data);

            if (data.success && data.result.errorMessage == "") {
                promoMessage.innerText = `Your promo code grants you a ${data.result.duration} day trial`;
            } else {
                promoMessage.innerText = data.result.errorMessage;
            }
        } catch (error) {
            console.error('Error:', error);
            promoMessage.innerText = 'Hmmmm, looks like we are unable to validate your code for now. You can just proceed and we will apply it a bit later, yeah?';
        } finally {
            loader.style.display = 'none';
        }
    }

    function SubscriptionOperation(subscriptionId, planId, operation) {
        if (validate()) {
            var formobject = $('#frmIndex').serialize();
            var csrftoken = $('input[name="__RequestVerificationToken"]').val();
            $.ajax({
                url: '/Home/SubscriptionOperation',
                type: 'POST',
                headers: { RequestVerificationToken: csrftoken },
                data: formobject + "&subscriptionId=" + subscriptionId + "&planId=" + planId + "&operation=" + operation,
                cache: false,
                success: function (result) {
                    $('#divIndex').html(result);
                },
                Error:
                    function (result) {
                        $('#divIndex').html(result);
                    }
            });
        }
        else {
            swal({
                title: "Required",
                text: "Please fill all required values",
                icon: "warning"
            })

        }
    }


    function validate() {
        var valid = true;
        $(':input[required]:visible').each(function () {
            if ($(this).val() == "") //check loginc here
                return valid = false;
        });
        return valid;
    }
</script>